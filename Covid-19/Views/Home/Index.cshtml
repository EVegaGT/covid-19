@using Domain.Models
@using Domain.Enums
@using Newtonsoft.Json;
@{
    ViewData["Title"] = "Home Page";
    List<Region> topRegions = ViewBag.topRegions;
    List<string> codeList = ViewBag.codeList;
    List<Province> topProvinces = ViewBag.topProvinces;
    string code = ViewBag.code;
}
<div class="text-center">
    <h1 class="display-4">Welcome to COVID-19</h1>
    <div class="col-12 main-menu-borde">
        <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group" role="group" aria-label="First group">
                <form method="POST">
                    <div class="btn-group me-3">
                        <select class="form-select rounded-left rounded-right fs-5 main-btn-padding" name="code">
                            <option selected value="">Regions</option>
                            @foreach (var codeValue in codeList)
                            {
                                <option class="dropdown-item" value="@codeValue">@codeValue</option>
                            }
                        </select>
                        @*We send the list as parameter, so that we don't have to call 2 times the api*@
                        <input type="hidden" name="jsonCodeList" value="@JsonConvert.SerializeObject(codeList)" />
                    </div>
                    <div class="btn-group" role="group">
                        <button type="submit" class="btn btn-primary rounded-left rounded-right fs-5 main-btn-padding">Report</button>
                    </div>
                </form>
            </div>
            <div class="input-group">
                <div class="btn-group rounded-pill" role="group" aria-label="Basic radio toggle button group">
                    <div class="btn-group" role="group">
                        @if (string.IsNullOrEmpty(code))
                        {
                            <a target="_blank" href="@Url.Action("ExportData", "Home", new { type = ExportType.XML})" class="btn btn-outline-primary rounded-left fs-5 main-btn-padding">XML</a>
                            <a target="_blank" href="@Url.Action("ExportData", "Home", new { type = ExportType.JSON})" class="btn btn-outline-primary fs-5 main-btn-padding">JSON</a>
                            <a target="_blank" href="@Url.Action("ExportData", "Home", new { type = ExportType.CSV})" class="btn btn-outline-primary rounded-right fs-5 main-btn-padding">CSV</a>
                        }
                        else
                        {
                            <a target="_blank" href="@Url.Action("ExportDataProvince", "Home", new { type = ExportType.XML, code = code})" class="btn btn-outline-primary rounded-left fs-5 main-btn-padding">XML</a>
                            <a target="_blank" href="@Url.Action("ExportDataProvince", "Home", new { type = ExportType.JSON, code = code})" class="btn btn-outline-primary fs-5 main-btn-padding">JSON</a>
                            <a target="_blank" href="@Url.Action("ExportDataProvince", "Home", new { type = ExportType.CSV, code = code})" class="btn btn-outline-primary rounded-right fs-5 main-btn-padding">CSV</a>
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="col-12">
        <table class="table table-borderless border">
            @{
                if (topRegions != null && topRegions.Count > 0)
                {
                    <thead>
                        <tr>
                            <th scope="col"><strong>REGION</strong></th>
                            <th scope="col"><strong>CASES</strong></th>
                            <th scope="col"><strong>DEATHS</strong></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var region in topRegions)
                        {
                            <tr>
                                <th>@region.Name</th>
                                <td>@region.Confirmed.ToString("###,###,####")</td>
                                <td>@region.Deaths.ToString("###,###,####")</td>
                            </tr>
                        }
                    </tbody>
                }
                else if (topProvinces != null && topProvinces.Count > 0)
                {
                    <thead>
                        <tr>
                            <th scope="col"><strong>PROVINCE</strong></th>
                            <th scope="col"><strong>CASES</strong></th>
                            <th scope="col"><strong>DEATHS</strong></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var province in topProvinces)
                        {
                            <tr>
                                <th>@province.ProvinceName</th>
                                <td>@province.Confirmed.ToString("###,###,####")</td>
                                <td>@province.Deaths.ToString("###,###,####")</td>
                            </tr>
                        }
                    </tbody>
                }
            }
        </table>
    </div>
</div>
